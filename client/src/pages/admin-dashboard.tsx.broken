import { useAuth } from "@/hooks/use-auth";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DataTable } from "@/components/ui/data-table";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { insertInternshipSchema, insertUserSchema } from "@shared/schema";
import { Loader2, Users, Download, Trash, Building2, GraduationCap, Briefcase, UserPlus, Plus, Menu, Pencil } from "lucide-react";
import { Redirect } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useState } from "react";

interface User {
  id: number;
  username: string;
  email: string;
  role: string;
}

interface Internship {
  id: number;
  title: string;
  description: string;
  location: string;
  requirements: string;
  startDate: string;
  endDate: string;
  companyId: number;
  companyName?: string;
}

interface Application {
  id: number;
  studentId: string;
  status: string;
  resumeUrl: string;
}

export default function AdminDashboard() {
  const { user, logoutMutation } = useAuth();
  const { toast } = useToast();
  const [selectedInternshipId, setSelectedInternshipId] = useState<number | null>(null);
  const [createAccountOpen, setCreateAccountOpen] = useState(false);
  const [createInternshipOpen, setCreateInternshipOpen] = useState(false);

  const { data: users = [], isLoading: loadingUsers } = useQuery<User[]>({
    queryKey: ["/api/admin/users"],
  });

  const { data: internships = [], isLoading: loadingInternships } = useQuery<Internship[]>({
    queryKey: ["/api/internships"],
  });

  const { data: internshipApplications = [] } = useQuery<Application[]>({
    queryKey: [`/api/applications/internship/${selectedInternshipId}`],
    enabled: !!selectedInternshipId,
  });

  const { data: allApplications = [], isLoading: loadingApplications } = useQuery<Application[]>({
    queryKey: ["/api/admin/applications"],
  });

  const deleteUserMutation = useMutation({
    mutationFn: async (userId: number) => {
      const res = await apiRequest("DELETE", `/api/admin/users/${userId}`);
      if (!res.ok) throw new Error("Failed to delete user");
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/users"] });
      toast({ title: "User deleted successfully" });
    },
  });

  const deleteInternshipMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest("DELETE", `/api/admin/internships/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/internships"] });
      toast({ title: "Internship deleted successfully" });
    },
    onError: (error: Error) => {
      toast({ 
        title: "Failed to delete internship", 
        description: error.message,
        variant: "destructive" 
      });
    },
  });
  
  const [editInternshipData, setEditInternshipData] = useState<Internship | null>(null);
  const [isEditInternshipOpen, setIsEditInternshipOpen] = useState(false);
  
  const editInternshipForm = useForm({
    resolver: zodResolver(insertInternshipSchema),
    defaultValues: {
      title: "",
      description: "",
      requirements: "",
      location: "",
      startDate: "",
      endDate: "",
    },
  });
  
  const updateInternshipMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("PATCH", `/api/admin/internships/${editInternshipData?.id}`, data);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/internships"] });
      setIsEditInternshipOpen(false);
      toast({ title: "Internship updated successfully" });
    },
    onError: (error: Error) => {
      toast({ 
        title: "Failed to update internship", 
        description: error.message,
        variant: "destructive" 
      });
    },
  });

  const updateApplicationMutation = useMutation({
    mutationFn: async ({ id, status }: { id: number; status: string }) => {
      const res = await apiRequest("PATCH", `/api/applications/${id}/status`, { status });
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/applications/internship/${selectedInternshipId}`] });
    },
  });

  const exportApplications = async () => {
    const response = await fetch("/api/admin/applications/export");
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "applications.xlsx";
    a.click();
  };

  const createAccountForm = useForm({
    resolver: zodResolver(insertUserSchema),
    defaultValues: {
      username: "",
      password: "",
      email: "",
      // role: "student", Removed as per intention
      name: "",
    },
  });

  const createInternshipForm = useForm({
    resolver: zodResolver(insertInternshipSchema),
    defaultValues: {
      title: "",
      description: "",
      requirements: "",
      location: "",
      startDate: new Date().toISOString().split("T")[0],
      endDate: new Date().toISOString().split("T")[0],
    },
  });

  const createAccountMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("POST", "/api/register", data);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/users"] });
      setCreateAccountOpen(false);
      createAccountForm.reset();
      toast({ title: "Account created successfully" });
    },
  });

  const createInternshipMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("POST", "/api/internships", data);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/internships"] });
      setCreateInternshipOpen(false);
      createInternshipForm.reset();
      toast({ title: "Internship created successfully" });
    },
  });

  if (!user || user.role !== "admin") {
    return <Redirect to="/auth" />;
  }

  const studentUsers = users.filter(u => u.role === "student");
  const companyUsers = users.filter(u => u.role === "company");
  const adminUsers = users.filter(u => u.role === "admin");

  const userColumns = [
    { accessorKey: "id", header: "ID" },
    { accessorKey: "username", header: "Username" },
    { accessorKey: "email", header: "Email" },
    {
      id: "actions",
      cell: ({ row }: { row: { original: User } }) => (
        <div className="flex gap-2">
          <Button
            variant="destructive"
            size="icon"
            onClick={() => deleteUserMutation.mutate(row.original.id)}
          >
            <Trash className="h-4 w-4" />
          </Button>
        </div>
      ),
    },
  ];

  return (
    <>
      <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white p-4 sm:p-6">
        <div className="max-w-7xl mx-auto space-y-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 bg-white p-6 rounded-xl shadow-sm">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">Admin Dashboard</h1>
              <p className="text-muted-foreground mt-1">Manage your internship portal system</p>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="gap-2 shadow-sm hover:shadow transition-all">
                  <Menu className="h-4 w-4" />
                  Actions
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56 shadow-lg border-none">
                <DropdownMenuLabel>Admin Actions</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={() => setCreateAccountOpen(true)}
                  className="cursor-pointer hover:bg-primary/10 transition-colors"
                >
                  <div className="flex items-center gap-2 py-1">
                    <div className="bg-primary/10 p-1 rounded-full">
                      <UserPlus className="h-4 w-4 text-primary" />
                    </div>
                    <span>New Account</span>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuItem 
                  onClick={() => setCreateInternshipOpen(true)}
                  className="cursor-pointer hover:bg-primary/10 transition-colors"
                >
                  <div className="flex items-center gap-2 py-1">
                    <div className="bg-primary/10 p-1 rounded-full">
                      <Plus className="h-4 w-4 text-primary" />
                    </div>
                    <span>New Internship</span>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuItem 
                  onClick={exportApplications}
                  className="cursor-pointer hover:bg-primary/10 transition-colors"
                >
                  <div className="flex items-center gap-2 py-1">
                    <div className="bg-primary/10 p-1 rounded-full">
                      <Download className="h-4 w-4 text-primary" />
                    </div>
                    <span>Export Applications</span>
                  </div>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={() => logoutMutation.mutate()}
                  className="cursor-pointer hover:bg-destructive/10 text-destructive transition-colors"
                >
                  <div className="flex items-center gap-2 py-1">
                    <span>Logout</span>
                  </div>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
            <Card className="aspect-square border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300">
              <CardHeader className="pb-0">
                <CardTitle className="flex items-center gap-2 text-md font-medium text-slate-700">
                  <div className="p-2 rounded-lg bg-slate-100">
                    <GraduationCap className="h-4 w-4 text-slate-600" />
                  </div>
                  Students
                </CardTitle>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center h-[calc(100%-5rem)]">
                <p className="text-5xl font-semibold text-slate-800">
                  {studentUsers.length}
                </p>
                <p className="text-sm text-slate-500 mt-2">Total registered students</p>
              </CardContent>
            </Card>

            <Card className="aspect-square border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300">
              <CardHeader className="pb-0">
                <CardTitle className="flex items-center gap-2 text-md font-medium text-slate-700">
                  <div className="p-2 rounded-lg bg-slate-100">
                    <Building2 className="h-4 w-4 text-slate-600" />
                  </div>
                  Companies
                </CardTitle>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center h-[calc(100%-5rem)]">
                <p className="text-5xl font-semibold text-slate-800">
                  {companyUsers.length}
                </p>
                <p className="text-sm text-slate-500 mt-2">Partner companies</p>
              </CardContent>
            </Card>

            <Card className="aspect-square border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300">
              <CardHeader className="pb-0">
                <CardTitle className="flex items-center gap-2 text-md font-medium text-slate-700">
                  <div className="p-2 rounded-lg bg-slate-100">
                    <Briefcase className="h-4 w-4 text-slate-600" />
                  </div>
                  Internships
                </CardTitle>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center h-[calc(100%-5rem)]">
                <p className="text-5xl font-semibold text-slate-800">
                  {internships.length}
                </p>
                <p className="text-sm text-slate-500 mt-2">Available positions</p>
              </CardContent>
            </Card>
          </div>

          <div className="overflow-hidden">
            <Tabs defaultValue="students" className="w-full">
              <TabsList className="w-full flex-wrap bg-slate-100 p-1 rounded-lg">
                <TabsTrigger value="students" className="data-[state=active]:bg-white data-[state=active]:text-slate-800 data-[state=active]:shadow-sm font-medium transition-all duration-200">
                  <GraduationCap className="h-4 w-4 mr-2 text-slate-500" />
                  Students
                </TabsTrigger>
                <TabsTrigger value="companies" className="data-[state=active]:bg-white data-[state=active]:text-slate-800 data-[state=active]:shadow-sm font-medium transition-all duration-200">
                  <Building2 className="h-4 w-4 mr-2 text-slate-500" />
                  Companies
                </TabsTrigger>
                <TabsTrigger value="admins" className="data-[state=active]:bg-white data-[state=active]:text-slate-800 data-[state=active]:shadow-sm font-medium transition-all duration-200">
                  <Users className="h-4 w-4 mr-2 text-slate-500" />
                  Admins
                </TabsTrigger>
                <TabsTrigger value="internships" className="data-[state=active]:bg-white data-[state=active]:text-slate-800 data-[state=active]:shadow-sm font-medium transition-all duration-200">
                  <Briefcase className="h-4 w-4 mr-2 text-slate-500" />
                  Internships
                </TabsTrigger>
                <TabsTrigger value="applications" className="data-[state=active]:bg-white data-[state=active]:text-slate-800 data-[state=active]:shadow-sm font-medium transition-all duration-200">
                  <Download className="h-4 w-4 mr-2 text-slate-500" />
                  Applications
                </TabsTrigger>
              </TabsList>
              <TabsContent value="students">
                <Card>
                  <CardHeader>
                    <CardTitle>Student Accounts</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <DataTable columns={userColumns} data={studentUsers} />
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="companies">
                <Card>
                  <CardHeader>
                    <CardTitle>Company Accounts</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <DataTable columns={userColumns} data={companyUsers} />
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="admins">
                <Card>
                  <CardHeader>
                    <CardTitle>Admin Accounts</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <DataTable columns={userColumns} data={adminUsers} />
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="internships">
                <Card>
                  <CardHeader>
                    <CardTitle>All Internships</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {loadingInternships ? (
                      <div className="flex justify-center">
                        <Loader2 className="h-6 w-6 animate-spin" />
                      </div>
                    ) : (
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {internships.map((internship) => (
                          <Card key={internship.id} className="border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden">
                            <CardContent className="p-0">
                              <div className="flex flex-col h-full">
                                <div className="bg-slate-50 p-4">
                                  <h3 className="font-medium text-lg text-slate-800">{internship.title}</h3>
                                  <div className="text-sm text-slate-600 mt-0.5">
                                    By <span className="font-medium">{internship.companyName}</span>
                                  </div>
                                  <div className="flex items-center gap-2 text-xs text-slate-500 mt-1">
                                    <span className="bg-white border border-slate-200 rounded-full px-2 py-0.5">{internship.location}</span>
                                    <span>•</span>
                                    <span className="bg-white border border-slate-200 rounded-full px-2 py-0.5">
                                      {new Date(internship.startDate).toLocaleDateString('en-US', {month: 'short', day: 'numeric'})} - {new Date(internship.endDate).toLocaleDateString('en-US', {month: 'short', day: 'numeric'})}
                                    </span>
                                  </div>
                                </div>
                                <div className="p-4">
                                  <p className="text-sm text-slate-600 line-clamp-3 mb-4">
                                    {internship.description}
                                  </p>
                                  
                                  <div className="mt-auto flex items-center justify-between pt-2 border-t border-slate-100">
                                    <div className="text-xs text-slate-500">
                                      ID: #{internship.id}
                                    </div>
                                    <div className="flex gap-2">
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="h-8 rounded-md border-slate-200 text-slate-700 hover:bg-slate-50"
                                        onClick={() => {
                                          setEditInternshipData(internship);
                                          editInternshipForm.reset({
                                            title: internship.title,
                                            description: internship.description,
                                            requirements: internship.requirements,
                                            location: internship.location,
                                            startDate: internship.startDate,
                                            endDate: internship.endDate,
                                          });
                                          setIsEditInternshipOpen(true);
                                        }}
                                      >
                                        <Pencil className="h-3.5 w-3.5 mr-1 text-slate-500" />
                                        Edit
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="h-8 rounded-md border-red-200 text-red-600 hover:bg-red-50"
                                        onClick={() => deleteInternshipMutation.mutate(internship.id)}
                                      >
                                        <Trash className="h-3.5 w-3.5 mr-1" />
                                        Delete
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="applications">
                <Card>
                  <CardHeader className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                    <CardTitle>All Applications</CardTitle>
                    <Button variant="outline" onClick={exportApplications} className="flex items-center gap-2">
                      <Download className="h-4 w-4" />
                      Export to Excel
                    </Button>
                  </CardHeader>
                  <CardContent>
                    {loadingApplications ? (
                      <div className="flex justify-center py-12">
                        <Loader2 className="h-8 w-8 animate-spin text-primary" />
                      </div>
                    ) : allApplications.length === 0 ? (
                      <div className="text-center py-12 text-muted-foreground">
                        No applications found in the system
                      </div>
                    ) : (
                      <div className="space-y-6">
                        <div className="grid grid-cols-1 gap-6">
                          {allApplications.map((application) => {
                            // Find the associated internship
                            const internship = internships.find(i => i.id === application.internshipId);
                            // Find the student
                            const student = users.find(u => u.id === Number(application.studentId));
                            
                            return (
                              <Card key={application.id} className="overflow-hidden border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300">
                                <CardContent className="p-0">
                                  <div className="bg-slate-50 p-4">
                                    <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
                                      <div>
                                        <h3 className="font-medium text-slate-800">
                                          {internship ? (
                                            <span>
                                              Application for: <span className="font-semibold">{internship.title}</span>
                                            </span>
                                          ) : (
                                            <span>Internship ID: {application.internshipId}</span>
                                          )}
                                        </h3>
                                        <div className="text-sm mt-1 text-slate-500">
                                          By: <span className="font-medium">{student?.username || `Student ID: ${application.studentId}`}</span>
                                        </div>
                                        {internship && (
                                          <div className="text-sm mt-1 text-slate-500">
                                            Company: <span className="font-medium">{internship.companyName}</span>
                                          </div>
                                        )}
                                      </div>
                                      <Badge
                                        className={cn(
                                          "text-xs px-2 py-1 rounded-full font-medium",
                                          application.status === "pending" && "bg-yellow-100 text-yellow-800 hover:bg-yellow-100",
                                          application.status === "accepted" && "bg-green-100 text-green-800 hover:bg-green-100",
                                          application.status === "rejected" && "bg-red-100 text-red-800 hover:bg-red-100"
                                        )}
                                      >
                                        {application.status.charAt(0).toUpperCase() + application.status.slice(1)}
                                      </Badge>
                                    </div>
                                  </div>
                                  <div className="p-4">
                                    <p className="text-sm text-slate-600 mb-2">
                                      <span className="font-medium">Resume:</span>{' '}
                                      <a 
                                        href={application.resumeUrl} 
                                        target="_blank" 
                                        rel="noopener noreferrer" 
                                        className="text-primary hover:underline"
                                      >
                                        {application.resumeUrl}
                                      </a>
                                    </p>
                                    {application.appliedAt && (
                                      <p className="text-xs text-slate-500">
                                        Applied on: {new Date(application.appliedAt).toLocaleDateString()}
                                      </p>
                                    )}
                                  </div>
                                </CardContent>
                              </Card>
                            );
                          })}
                        </div>
                        
                        <div className="mt-8">
                          <h3 className="font-medium text-lg mb-4">Filter Applications by Internship</h3>
                          <div className="relative bg-muted/50 rounded-md p-1">
                            <Select
                              value={selectedInternshipId?.toString() || ''}
                              onValueChange={(value) => setSelectedInternshipId(Number(value))}
                            >
                              <SelectTrigger className="w-full h-12 bg-background border-none shadow-sm">
                                <SelectValue placeholder="Select an internship to view applications" />
                              </SelectTrigger>
                              <SelectContent>
                                {internships.map((internship) => (
                                  <SelectItem key={internship.id} value={internship.id.toString()}>
                                    {internship.title} - {internship.companyName}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                        </div>

                        {selectedInternshipId ? (
                          <div className="mt-6">
                            <h3 className="font-medium text-lg mb-4">
                              Applications for: {internships.find(i => i.id === selectedInternshipId)?.title}
                            </h3>
                            
                            {internshipApplications.length === 0 ? (
                              <div className="text-center py-8 text-muted-foreground">
                                No applications for this internship
                              </div>
                            ) : (
                              <div className="grid gap-4">
                                {internshipApplications.map((application) => (
                                  <Card key={application.id} className="border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300">
                                    <CardContent className="p-0">
                                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                        <div className="p-4 sm:p-6 flex-1">
                                          <div className="flex items-center gap-3 mb-2">
                                            <div className={`w-2.5 h-2.5 rounded-full ${
                                              application.status === "pending" 
                                                ? "bg-amber-400" 
                                                : application.status === "accepted" 
                                                  ? "bg-emerald-500" 
                                                  : "bg-rose-500"
                                            }`}></div>
                                            <h3 className="font-medium text-slate-800">Student ID: {application.studentId}</h3>
                                          </div>
                                          <div className="space-y-1">
                                            <p className="text-sm text-slate-500 flex items-center gap-2">
                                              <span className="bg-slate-100 border border-slate-200 rounded-full px-2 py-0.5 text-xs font-medium text-slate-700">
                                                {application.status.charAt(0).toUpperCase() + application.status.slice(1)}
                                              </span>
                                              <span>•</span>
                                              <a 
                                                href={application.resumeUrl} 
                                                target="_blank" 
                                                rel="noopener noreferrer" 
                                                className="text-slate-700 hover:text-slate-900 hover:underline inline-flex items-center gap-1"
                                              >
                                                View Resume
                                      <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                                        <polyline points="15 3 21 3 21 9"></polyline>
                                        <line x1="10" y1="14" x2="21" y2="3"></line>
                                      </svg>
                                    </a>
                                  </p>
                                </div>
                              </div>
                              
                              {application.status === "pending" && (
                                <div className="bg-slate-50 p-4 sm:p-6 flex flex-row sm:flex-col gap-2 border-t sm:border-t-0 sm:border-l border-slate-100">
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="bg-emerald-50 text-emerald-600 border-emerald-200 hover:bg-emerald-100 hover:text-emerald-700 w-full"
                                    onClick={() => updateApplicationMutation.mutate({ id: application.id, status: "accepted" })}
                                  >
                                    Accept
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="border-rose-200 text-rose-600 hover:bg-rose-50 hover:text-rose-700 w-full"
                                    onClick={() => updateApplicationMutation.mutate({ id: application.id, status: "rejected" })}
                                  >
                                    Reject
                                  </Button>
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>

      {createAccountOpen && (
        <Dialog open={createAccountOpen} onOpenChange={setCreateAccountOpen}>
          <DialogContent className="sm:max-w-md border-none shadow-xl">
            <DialogHeader className="pb-4 border-b">
              <DialogTitle className="text-xl font-bold">Create New Account</DialogTitle>
            </DialogHeader>
            <Form {...createAccountForm}>
              <form onSubmit={createAccountForm.handleSubmit((data) => createAccountMutation.mutate(data))} className="space-y-4 py-4">
                <FormField
                  control={createAccountForm.control}
                  name="username"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Username</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                          placeholder="Enter a unique username"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={createAccountForm.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Password</FormLabel>
                      <FormControl>
                        <Input 
                          type="password" 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                          placeholder="Enter a secure password"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={createAccountForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Email</FormLabel>
                      <FormControl>
                        <Input 
                          type="email" 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                          placeholder="Enter a valid email address"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="pt-2">
                  <Button 
                    type="submit" 
                    className="w-full font-medium shadow-sm hover:shadow-md transition-all"
                    disabled={createAccountMutation.isPending}
                  >
                    {createAccountMutation.isPending ? (
                      <>
                        <span className="mr-2 inline-block animate-spin">⟳</span> 
                        Creating...
                      </>
                    ) : (
                      "Create Account"
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}

      {createInternshipOpen && (
        <Dialog open={createInternshipOpen} onOpenChange={setCreateInternshipOpen}>
          <DialogContent className="sm:max-w-lg border-none shadow-xl">
            <DialogHeader className="pb-4 border-b">
              <DialogTitle className="text-xl font-bold">Create New Internship</DialogTitle>
            </DialogHeader>
            <Form {...createInternshipForm}>
              <form onSubmit={createInternshipForm.handleSubmit((data) => createInternshipMutation.mutate(data))} className="space-y-5 py-4">
                <FormField
                  control={createInternshipForm.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Internship Title</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                          placeholder="e.g. Software Engineering Intern"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={createInternshipForm.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Description</FormLabel>
                      <FormControl>
                        <Textarea 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors h-24 resize-y" 
                          placeholder="Describe the internship role, responsibilities, and expectations"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={createInternshipForm.control}
                  name="requirements"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Requirements</FormLabel>
                      <FormControl>
                        <Textarea 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors h-24 resize-y" 
                          placeholder="List qualifications, skills, and experiences required"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={createInternshipForm.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Location</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                          placeholder="e.g. New York, NY or Remote"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={createInternshipForm.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Start Date</FormLabel>
                        <FormControl>
                          <Input 
                            type="date" 
                            {...field} 
                            className="bg-muted/30 focus:bg-white transition-colors" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={createInternshipForm.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">End Date</FormLabel>
                        <FormControl>
                          <Input 
                            type="date" 
                            {...field} 
                            className="bg-muted/30 focus:bg-white transition-colors" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="pt-2">
                  <Button 
                    type="submit" 
                    className="w-full font-medium shadow-sm hover:shadow-md transition-all"
                    disabled={createInternshipMutation.isPending}
                  >
                    {createInternshipMutation.isPending ? (
                      <>
                        <span className="mr-2 inline-block animate-spin">⟳</span> 
                        Creating...
                      </>
                    ) : (
                      "Create Internship"
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}

      {isEditInternshipOpen && (
        <Dialog open={isEditInternshipOpen} onOpenChange={setIsEditInternshipOpen}>
          <DialogContent className="sm:max-w-lg border-none shadow-xl">
            <DialogHeader className="pb-4 border-b">
              <DialogTitle className="text-xl font-bold">Edit Internship</DialogTitle>
            </DialogHeader>
            <Form {...editInternshipForm}>
              <form onSubmit={editInternshipForm.handleSubmit((data) => updateInternshipMutation.mutate(data))} className="space-y-5 py-4">
                <FormField
                  control={editInternshipForm.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Internship Title</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={editInternshipForm.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Description</FormLabel>
                      <FormControl>
                        <Textarea 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors h-24 resize-y" 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={editInternshipForm.control}
                  name="requirements"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Requirements</FormLabel>
                      <FormControl>
                        <Textarea 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors h-24 resize-y" 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={editInternshipForm.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium">Location</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          className="bg-muted/30 focus:bg-white transition-colors" 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editInternshipForm.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Start Date</FormLabel>
                        <FormControl>
                          <Input 
                            type="date" 
                            {...field} 
                            className="bg-muted/30 focus:bg-white transition-colors" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={editInternshipForm.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">End Date</FormLabel>
                        <FormControl>
                          <Input 
                            type="date" 
                            {...field} 
                            className="bg-muted/30 focus:bg-white transition-colors" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="pt-2 flex gap-3">
                  <Button 
                    type="submit" 
                    className="flex-1 font-medium shadow-sm hover:shadow-md transition-all"
                    disabled={updateInternshipMutation.isPending}
                  >
                    {updateInternshipMutation.isPending ? (
                      <>
                        <span className="mr-2 inline-block animate-spin">⟳</span> 
                        Updating...
                      </>
                    ) : (
                      "Update Internship"
                    )}
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline"
                    className="border-red-300 text-red-600 hover:bg-red-50 hover:text-red-700"
                    onClick={() => {
                      if (editInternshipData) {
                        deleteInternshipMutation.mutate(editInternshipData.id);
                        setIsEditInternshipOpen(false);
                      }
                    }}
                  >
                    Delete
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}
    </>
  );
}